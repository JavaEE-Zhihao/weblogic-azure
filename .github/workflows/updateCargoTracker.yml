name: Update Cargo Tracker

on:
  workflow_dispatch:
    inputs:
      aksClusterRGName:
        description: 'Specify resource group of aks cluster'
        required: true
        default: 'wlsd-aks-1327934454-4'
      aksClusterName:
        description: 'Specify aks cluster name'
        required: true
        default: 'wlsonaks0esltmxel6os24'
      acrName:
        description: 'Specify acr name'
        required: true
        default: 'wlsaksacresltmxel6os24'
      storageAccountName:
        description: 'Specify storage account of uploading .war file'
        required: true
        default: 'wlsdsa13279344541'
      storageContainerName:
        description: 'Specify container of uploading .war file'
        required: true
        default: 'wlsdcon13279344541'
  repository_dispatch:

env:
    refJavaee: bce4e6ec57726d4bc7992b45e1ff6e459b02fb39
    azCliVersion: 2.23.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    location: eastus
    ocrSSOUser: ${{ secrets.ORC_SSOUSER }}
    ocrSSOPSW: ${{ secrets.ORC_SSOPSW }}
    imageTag: ${{ github.run_id }}${{ github.run_number }}
    aksRepoUserName: oracle
    aksRepoBranchName: main
    wdtRuntimePassword: ${{ secrets.WDT_RUNTIMEPSW}}
    userAssignedManagedIdentity: ${{ secrets.USER_ASSIGNED_MANAGED_IDENTITY_ID }}
    wlsUserName: ${{ secrets.WLS_USERNAME }}
    wlsPassword: ${{ secrets.WLS_PSW }}
    acrName: ${{ github.event.inputs.acrName }}
    aksClusterName: ${{ github.event.inputs.aksClusterName }}
    aksClusterRGName: ${{ github.event.inputs.aksClusterRGName }}

jobs:
    preflight:
        runs-on: ubuntu-latest
        steps:
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8
            - name: Set up bicep
              run: |
                curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
                chmod +x ./bicep
                sudo mv ./bicep /usr/local/bin/bicep
                bicep --version
            - name: Checkout azure-javaee-iaas
              uses: actions/checkout@v2
              with:
                repository: Azure/azure-javaee-iaas
                path: azure-javaee-iaas
                ref: ${{ env.refJavaee }}
            - name: Build azure-javaee-iaas
              run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
            - name: Checkout ${{ env.aksRepoUserName }}/weblogic-azure
              uses: actions/checkout@v2
              with:
                repository: ${{ env.aksRepoUserName }}/weblogic-azure
                path: weblogic-azure
                ref: ${{ env.aksRepoBranchName }}
            - name: Build and test weblogic-azure/weblogic-azure-aks
              run: mvn -Pbicep -Ddev -Passembly clean install --file weblogic-azure/weblogic-azure-aks/pom.xml
            - name: Generate artifact file name and path
              id: artifact_file
              run: |
                version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' weblogic-azure/weblogic-azure-aks/pom.xml)
                artifactName=wls-on-aks-azure-marketplace-$version-arm-assembly
                unzip weblogic-azure/weblogic-azure-aks/target/$artifactName.zip -d weblogic-azure/weblogic-azure-aks/target/$artifactName
                echo "##[set-output name=artifactName;]${artifactName}"
                echo "##[set-output name=artifactPath;]weblogic-azure/weblogic-azure-aks/target/$artifactName"
            - name: Archive weblogic-azure/weblogic-azure-aks template
              uses: actions/upload-artifact@v1
              if: success()
              with:
                name: ${{steps.artifact_file.outputs.artifactName}}
                path: ${{steps.artifact_file.outputs.artifactPath}}
    deploy-cargo-tracker:
        needs: preflight
        runs-on: ubuntu-latest
        steps:
            - name: Checkout ${{ env.aksRepoUserName }}/weblogic-azure
              uses: actions/checkout@v2
              with:
                repository: ${{ env.aksRepoUserName }}/weblogic-azure
                path: weblogic-azure
                ref: ${{ env.aksRepoBranchName }}
            - name: Get version information from weblogic-azure/weblogic-azure-aks/pom.xml
              id: version
              run: |
                version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' weblogic-azure/weblogic-azure-aks/pom.xml)
                echo "version=${version}" >> $GITHUB_ENV
            - name: Output artifact name for Download action
              id: artifact_file
              run: |
                artifactName=wls-on-aks-azure-marketplace-$version-arm-assembly
                echo "artifactName=${artifactName}" >> $GITHUB_ENV
                echo "##[set-output name=artifactName;]${artifactName}"
            - name: Download artifact for deployment
              uses: actions/download-artifact@v1
              with:
                name: ${{steps.artifact_file.outputs.artifactName}}
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8
            - name: Install jq
              run: |
                sudo apt-get install jq -y
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Checkout zhengchang907/cargotracker-azure
              uses: actions/checkout@v2
              with:
                repository: zhengchang907/cargotracker-azure
                path: cargotracker
            - name: Build the app
              run: |
                echo "build the Cargo Tracker web app"
                mvn clean install -PweblogicOnAks --file cargotracker/pom.xml
            - name: Query version string for deployment verification
              run: |
                PROPERTY_FILE="cargotracker/target/cargo-tracker/WEB-INF/classes/org/eclipse/cargotracker/messages.properties"
                PROP_KEY=versionString
                deployVersion=$(cat $PROPERTY_FILE | grep "$PROP_KEY" | cut -d '=' -f 2)
                echo "deployVersion=${deployVersion}" >> $GITHUB_ENV
            - name: Upload the app to storage account
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az storage blob upload --account-name ${{ github.event.inputs.storageAccountName }} --container-name ${{ github.event.inputs.storageContainerName }} --file cargotracker/target/cargo-tracker.war --name cargo-tracker.war
            - name: Query web app blob url and set to env
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    cargoTrackerBlobUrl=$(az storage blob url --account-name ${{ github.event.inputs.storageAccountName }} --container-name ${{ github.event.inputs.storageContainerName }} --name cargo-tracker.war -o tsv)
                    echo "cargoTrackerBlobUrl=${cargoTrackerBlobUrl}" >> $GITHUB_ENV
            - name: Prepare parameter file
              run: |
                echo "replace placeholders using real parameter"
                sed -i "s/#location#/${location}/g; \
                        s/#wlsUserName#/${wlsUserName}/g; \
                        s/#wlsPassword#/${wlsPassword}/g; \
                        s/#userAssignedManagedIdentity#/${userAssignedManagedIdentity}/g; \
                        s/#ocrSSOPSW#/${ocrSSOPSW}/g; \
                        s/#ocrSSOUser#/${ocrSSOUser}/g; \
                        s/#appPackageUrls#/${cargoTrackerBlobUrl}/g; \
                        s/#wdtRuntimePassword#/${wdtRuntimePassword}/g; \
                        s/#acrName#/${acrName}/g; \
                        s/#aksClusterName#/${aksClusterName}/g; \
                        s/#aksClusterRGName#/${aksClusterRGName}/g; \
                        s/#testbranchName#/${aksRepoBranchName}/g; \
                        s/#gitUserName#/${aksRepoUserName}/g \
                        weblogic-azure/weblogic-azure-aks/src/test/updateAppParameters.json
            - name: Deploy WebLogic Server Cluster Domain offer
              id: deploy-wls-cluster
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az deployment group create \
                    --verbose \
                    --resource-group ${{ env.resourceGroupForWlsAks }} \
                    --name wls-on-aks \
                    --parameters @weblogic-azure/weblogic-azure-aks/src/test/updateAppParameters.json \
                    --template-file ${artifactName}/mainTemplate.json
            - name: Query Application Gateway URL
              run: |
                appgatewayname=$(az resource list --resource-group ${{ github.event.inputs.resourceGroupForWlsAks }} --query "[?type=='Microsoft.Network/applicationGateways'].name|[0]" -o tsv)
                echo $appgatewayname
                publicIpAddressId=$(az network application-gateway show --resource-group ${{ github.event.inputs.resourceGroupForWlsAks }} --name ${appgatewayname} --query frontendIpConfigurations[0].publicIpAddress.id -o tsv)
                echo $publicIpAddressId
                appGatewayURL=$(az network public-ip show --resource-group ${{ github.event.inputs.resourceGroupForWlsAks }} --ids ${publicIpAddressId} --query dnsSettings.fqdn -o tsv)
                echo $appGatewayURL
                echo "appGatewayURL=${appGatewayURL}" >> $GITHUB_ENV
            - name: Verify that the app is update
              run: |
                # install dependencies
                sudo apt-get install libegl1\
                      libopus0\
                      libwoff1\
                      libharfbuzz-icu0\
                      libgstreamer-plugins-base1.0-0\
                      libgstreamer-gl1.0-0\
                      libgstreamer-plugins-bad1.0-0\
                      libopenjp2-7\
                      libwebpdemux2\
                      libenchant1c2a\
                      libhyphen0\
                      libgles2\
                      gstreamer1.0-libav -y
                appURL=http://${{ env.appGatewayURL }}/cargo-tracker/
                cd cargotracker/src/test/aks/playwright-ui-test
                mvn clean install
                mvn exec:java -e -Dexec.mainClass=com.microsoft.azure.javaee.FetchBuildVersion -Dexec.args="'${appURL}' '${{ env.deployVersion }}'"